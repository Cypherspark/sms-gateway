// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package dbgen

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type MsgStatus string

const (
	MsgStatusQueued  MsgStatus = "queued"
	MsgStatusSending MsgStatus = "sending"
	MsgStatusSent    MsgStatus = "sent"
	MsgStatusFailed  MsgStatus = "failed"
)

func (e *MsgStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MsgStatus(s)
	case string:
		*e = MsgStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MsgStatus: %T", src)
	}
	return nil
}

type NullMsgStatus struct {
	MsgStatus MsgStatus `json:"msg_status"`
	Valid     bool      `json:"valid"` // Valid is true if MsgStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMsgStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MsgStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MsgStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMsgStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MsgStatus), nil
}

type Message struct {
	ID                string             `json:"id"`
	UserID            string             `json:"user_id"`
	ToMsisdn          string             `json:"to_msisdn"`
	Body              string             `json:"body"`
	Status            MsgStatus          `json:"status"`
	ProviderMessageID pgtype.Text        `json:"provider_message_id"`
	ErrorCode         pgtype.Text        `json:"error_code"`
	RequestedAt       pgtype.Timestamptz `json:"requested_at"`
	SentAt            pgtype.Timestamptz `json:"sent_at"`
	DeliveredAt       pgtype.Timestamptz `json:"delivered_at"`
	SendAfter         pgtype.Timestamptz `json:"send_after"`
	Attempts          int32              `json:"attempts"`
	IdempotencyKey    pgtype.Text        `json:"idempotency_key"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Balance      int32              `json:"balance"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	LastServedAt pgtype.Timestamptz `json:"last_served_at"`
}
