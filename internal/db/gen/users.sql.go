// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name)
VALUES ($1)
RETURNING id, name, balance, created_at, updated_at
`

type CreateUserRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Balance   int32              `json:"balance"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, name string) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, name)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const debitIfEnough = `-- name: DebitIfEnough :execrows
UPDATE users
SET balance = balance - $1
WHERE id = $2 AND balance >= $1
`

type DebitIfEnoughParams struct {
	Balance int32  `json:"balance"`
	ID      string `json:"id"`
}

func (q *Queries) DebitIfEnough(ctx context.Context, arg DebitIfEnoughParams) (int64, error) {
	result, err := q.db.Exec(ctx, debitIfEnough, arg.Balance, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getBalance = `-- name: GetBalance :one
SELECT balance FROM users WHERE id = $1
`

func (q *Queries) GetBalance(ctx context.Context, id string) (int32, error) {
	row := q.db.QueryRow(ctx, getBalance, id)
	var balance int32
	err := row.Scan(&balance)
	return balance, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, balance, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserRow struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	Balance   int32              `json:"balance"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const lockUser = `-- name: LockUser :exec
SELECT 1 FROM users WHERE id = $1 FOR UPDATE
`

// Optional: explicit row lock if you need it elsewhere
func (q *Queries) LockUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, lockUser, id)
	return err
}

const topUp = `-- name: TopUp :exec
UPDATE users
SET balance = balance + $1
WHERE id = $2
`

type TopUpParams struct {
	Balance int32  `json:"balance"`
	ID      string `json:"id"`
}

func (q *Queries) TopUp(ctx context.Context, arg TopUpParams) error {
	_, err := q.db.Exec(ctx, topUp, arg.Balance, arg.ID)
	return err
}
